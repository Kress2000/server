{
  "swagger": "3.0.0",
  "openapi": "3.0.0",
  "info": {
    "title": "Swagger documentstion - OpenAPI 3.0",
    "description": "My brand api documention",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.11"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "http://localhost:5000/"
    }
  ],
  "schemes": ["http", "https"],
  "paths": {
    "/mybrand/signup": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/mybrand/login": {
      "post": {
        "tags": ["user"],
        "summary": "logs  user in",
        "description": "This can only be done by registered in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/login"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/login"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32",
                  "$ref": "#/components/schemas/login"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time",
                  "$ref": "#/components/schemas/login"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$ref": "#/components/schemas/login"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          },
          "404": {
            "description": "No user found"
          }
        }
      }
    },
    "/mybrand/logout": {
      "delete": {
        "tags": ["user"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/mybrand/api/users": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["user"],
        "summary": "Get all users in th storee",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      }
    },
    "/mybrand/api/users/{id}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by Id",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Update user",
        "description": "This can only be done by the logged in Admin.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          },
          "404": {
            "description": "The user with this Id not found!"
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "User is deleted from the system.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "title": "id",
            "in": "path",
            "required": true,
            "description": "ID of blog that we want to find",
            "type": "string"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "202": "Deleted successfully",
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/mybrand/api/blogs": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["blogs"],
        "summary": "Get all blogs in system",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/schemas/blog"
            }
          }
        }
      }
    },
    "/mybrand/api/blogs/{id}": {
      "parameters": [
        {
          "title": "id",
          "in": "path",
          "required": true,
          "description": "ID of blog that we want to find",
          "type": "string"
        }
      ],
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete blog with given ID",
        "tags": ["blogs"],
        "responses": {
          "200": {
            "description": "Blog is deleted",
            "schema": {}
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "tags": ["blogs"],
        "summary": "Update Blog",
        "description": "This can only be done by the logged in Admin.",
        "operationId": "updateUser",
        "requestBody": {
          "description": "Update an existent blog in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/blog"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          },
          "404": {
            "description": "The user with this Id not found!"
          }
        }
      }
    },
    "/mybrand/api/blogs/add": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["blogs"],
        "summary": "Create new blog in DB",
        "description": "Create new blog in DB",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/blog"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/blog"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/blog"
              }
            }
          }
        },
        "parameters": [
          {
            "title": "body",
            "in": "body",
            "description": "blog that we want to create",
            "schema": {
              "$ref": "#/components/schemas/blog"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "New blog is created",
            "schema": {
              "$ref": "#/components/schemas/blog"
            }
          },
          "500": "Bad request"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "nsanzimfura eric"
          },
          "email": {
            "type": "string",
            "example": "erickres3s@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "kress123"
          },
          "confirmPass": {
            "type": "string",
            "example": "kress123"
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "login": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "erickress1@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "kress123"
          }
        },
        "xml": {
          "name": "user"
        }
      },
      "Users": {
        "type": "array",
        "$ref": "#/components/schemas/User"
      },
      "blog": {
        "required": ["title", "description", "img"],
        "properties": {
          "_id": {
            "type": "string",
            "uniqueItems": true
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "img": {
            "type": "file"
          }
        }
      },
      "blogs": {
        "type": "array",
        "$ref": "#/components/schemas/blog"
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "xml": {
          "name": "##default"
        }
      }
    },
    "requestBodies": {
      "UserArray": {
        "description": "List of user objects",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "security": {
        "bearerAuth": []
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}
